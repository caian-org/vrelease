name: build

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  multi-os:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Pre-build steps
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ];  then sudo apt-get install -y libssl-dev; fi
          if [ "${{ matrix.os }}" = "macos-latest" ];   then gem install bundler;  fi
          if [ "${{ matrix.os }}" = "macos-latest" ];   then brew install openssl; fi
          if [ "${{ matrix.os }}" = "windows-latest" ]; then choco install curl; fi

      - name: Environment info
        run: echo $GITHUB_SHA $GITHUB_REF

      - name: Add V download dir to PATH
        run: echo "/tmp/v" >> $GITHUB_PATH

      - name: Install V
        run: time bash "${GITHUB_WORKSPACE}/.github/install-v.sh"
        env:
          OS: ${{ matrix.os }}

      - name: Compile vrelease
        run: time make build-release

      - name: After build run
        run: |
          ./vrelease -h
          ./vrelease -v

      - name: Rename artifact
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            export ARTIFACT="vrelease-$(git rev-parse --short "$GITHUB_SHA")-linux"
          fi

          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            export ARTIFACT="vrelease-$(git rev-parse --short "$GITHUB_SHA")-macos"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            export ARTIFACT="vrelease-$(git rev-parse --short "$GITHUB_SHA")-windows.exe"
          fi

          export ARTIFACT_PATH="$(pwd)/${ARTIFACT}"
          echo "::set-env name=ARTIFACT_PATH::$ARTIFACT_PATH"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: vrelease
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 1
